<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo"
       xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jee="http://www.springframework.org/schema/jee" xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
 	http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-3.2.xsd
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd">

    <context:component-scan base-package="com.tpadsz.update.mvc"/>
    <!-- 消费方应用名，用于计算依赖关系，不是匹配条件，不要与提供方一样 -->
    <dubbo:application name="high_price_6"/>

    <!-- 使用zookeeper注册中心暴露服务地址 -->
    <dubbo:registry protocol="zookeeper" address="${dubbo.registry.address}"/>

    <!-- 业务使用-->
    <dubbo:reference id="coinsAccountManager" version="0.2.0" interface="com.tpadsz.cic.coin.api.CoinsAccountManager"
                     validation="true"/>
    <dubbo:reference id="coinsEarnerManager" version="0.2.0" interface="com.tpadsz.cic.coin.api.CoinsEarnerManager"
                     validation="true"/>
    <dubbo:reference id="coinsConsumerManager" version="0.2.0" interface="com.tpadsz.cic.coin.api.CoinsConsumerManager"
                     validation="true"/>

    <dubbo:reference id="userManager" version="0.3.0"
                     interface="com.tpadsz.ctc.api.UserManager" validation="true"/>
    <dubbo:reference id="shelfManager" version="0.3.0"
                     interface="com.tpadsz.ctc.api.ShelfManager" validation="true"/>
    <dubbo:reference id="taskManager" version="0.3.0"
                     interface="com.tpadsz.ctc.api.TaskManager" validation="true"/>
    <dubbo:reference id="settingManager" version="0.3.0"
                     interface="com.tpadsz.ctc.api.SettingManager" validation="true"/>
    <dubbo:reference id="stateManager" version="0.3.0"
                     interface="com.tpadsz.ctc.api.StateManager" validation="true"/>

    <!--<import resource="beans-shiro.xml" />-->

    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
          init-method="init" destroy-method="close">
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
        <property name="initialSize" value="${jdbc.initialPoolSize}"/>
        <property name="minIdle" value="${jdbc.miniPoolSize}"/>
        <property name="maxActive" value="${jdbc.maxPoolSize}"/>
        <property name="maxWait" value="${jdbc.maxIdleTime}"/>
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 'x'"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="poolPreparedStatements" value="false"/>
        <property name="filters" value="stat"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- JDBC 事务管理器, 在service层面上实现事务管理 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <tx:method name="save*" propagation="REQUIRED" isolation="DEFAULT"
                       rollback-for="ApplicationException"/>
            <tx:method name="update*" propagation="REQUIRED" isolation="DEFAULT"
                       rollback-for="ApplicationException"/>
            <tx:method name="delete*" propagation="REQUIRED" isolation="DEFAULT"
                       rollback-for="ApplicationException"/>
            <tx:method name="batch*" propagation="REQUIRED" isolation="DEFAULT"
                       rollback-for="ApplicationException"/>
            <tx:method name="patch*" propagation="REQUIRED" isolation="DEFAULT"
                       rollback-for="ApplicationException"/>
            <tx:method name="register*" propagation="REQUIRED"
                       isolation="DEFAULT" rollback-for="ApplicationException"/>
            <tx:method name="load*" propagation="REQUIRED" isolation="DEFAULT"
                       read-only="true"/>
            <tx:method name="get*" propagation="REQUIRED" isolation="DEFAULT"
                       read-only="true"/>
            <tx:method name="find*" propagation="REQUIRED" isolation="DEFAULT"
                       read-only="true"/>
            <!-- 剩下的其他方法. -->
            <tx:method name="*" propagation="REQUIRED" isolation="DEFAULT"
                       rollback-for="ApplicationException"/>
        </tx:attributes>
    </tx:advice>

    <!-- aop配置 -->
    <!--<aop:config>-->
    <!--<aop:pointcut id="txPointcut"-->
    <!--expression="execution(* com.tpadsz.task..*(..))"/>-->
    <!--&lt;!&ndash; advisor是切入点通知(既包含切入点,有包含通知) &ndash;&gt;-->
    <!--&lt;!&ndash; order 表示AOP的执行顺序, 对于同一个方法配置了order时 , order越低, 优先级越高. &ndash;&gt;-->
    <!--<aop:advisor pointcut-ref="txPointcut" advice-ref="txAdvice"/>-->
    <!--</aop:config>-->

    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="mapperLocations" value="classpath:mybatis/*.xml"/>
        <property name="typeAliasesPackage" value="com.tpadsz.update.mvc.model"/>
        <property name="configLocation" value="classpath:mybatisConfig.xml"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
          p:sqlSessionFactoryBeanName="sqlSessionFactory" p:basePackage="com.tpadsz.update.mvc.dao"/>

    <bean id="JedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig"
          p:maxIdle="30" p:minEvictableIdleTimeMillis="300000"
          p:numTestsPerEvictionRun="3" p:timeBetweenEvictionRunsMillis="60000">
    </bean>

    <bean id="jedisConnFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:poolConfig-ref="JedisPoolConfig" p:hostName="${redis.url}" p:port="6379"
          p:usePool="true">
    </bean>

    <!-- redis template definition -->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"
          p:connectionFactory-ref="jedisConnFactory">
        <property name="defaultSerializer">
            <bean
                    class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
    </bean>

    <bean id="hptQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg value="${jms.queue.hptQueue}"/>
    </bean>

    <bean id="connectionFactory"
          class="org.springframework.jms.connection.SingleConnectionFactory">
        <property name="targetConnectionFactory" ref="pooledConnectionFactory"/>
    </bean>

    <bean id="jmsTemplate" class="org.springframework.jms.core.JmsTemplate">
        <property name="connectionFactory" ref="connectionFactory"></property>
        <property name="defaultDestination" ref="hptQueue"></property>
        <!--<property name="messageConverter" ref="innerMessageConverter"></property>-->
        <property name="receiveTimeout" value="60000"/>
        <property name="explicitQosEnabled" value="true"></property>
    </bean>


    <bean id="pooledConnectionFactory" class="org.apache.activemq.pool.PooledConnectionFactory"
          destroy-method="stop">
        <property name="connectionFactory">
            <bean class="org.apache.activemq.ActiveMQConnectionFactory">
                <property name="brokerURL" value="${jms.url}"/>
                <property name="useAsyncSend" value="true"/>
            </bean>
        </property>
        <property name="maxConnections" value="100"/>
    </bean>

    <context:property-placeholder
            ignore-resource-not-found="true"
            location="classpath*:/setup.properties, classpath*:/setup.demo.properties"/>

    <context:annotation-config/>
    <aop:aspectj-autoproxy/>
</beans>